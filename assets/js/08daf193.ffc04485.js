"use strict";(self.webpackChunkwiznet_document=self.webpackChunkwiznet_document||[]).push([[4563],{30691:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=r(85893),n=r(11151);const s={id:"gpio",title:"General Purpose Input/Outputs (GPIO)",date:new Date("2020-06-10T00:00:00.000Z")},a=void 0,o={id:"Product/iMCU/W7500/Peripherals-internal/gpio",title:"General Purpose Input/Outputs (GPIO)",description:"Introduction",source:"@site/docs/Product/iMCU/W7500/Peripherals-internal/gpio.md",sourceDirName:"Product/iMCU/W7500/Peripherals-internal",slug:"/Product/iMCU/W7500/Peripherals-internal/gpio",permalink:"/Product/iMCU/W7500/Peripherals-internal/gpio",draft:!1,unlisted:!1,editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iMCU/W7500/Peripherals-internal/gpio.md",tags:[],version:"current",frontMatter:{id:"gpio",title:"General Purpose Input/Outputs (GPIO)",date:"2020-06-10T00:00:00.000Z"},sidebar:"docs",previous:{title:"UART Hardware Control example",permalink:"/Product/iMCU/W7500/Peripherals-internal/flowcontrol"},next:{title:"Inter-Integrated Circuit (I2C)",permalink:"/Product/iMCU/W7500/Peripherals-internal/i2c"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Functional description",id:"functional-description",level:2},{value:"Masked access",id:"masked-access",level:3},{value:"Peripheral_Examples",id:"peripheral_examples",level:2}];function d(e){const t={a:"a",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"The GPIO(General-Purpose I/O Port) is composed of four physical GPIO blocks, each corresponding to an individual GPIO port(PORT A, PORT B, PORT C, PORT D). The GPIO supports up to 53 programmable input/output pins, depending on the peripherals being used."}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(t.p,{children:"The GPIO peripheral consists of the following feature."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"GPIO_DATAOUT can SET/CLEAR by the SET register and CLEAR register.(1 for set and 0 for clear)"}),"\n",(0,i.jsx)(t.li,{children:"Mask registers allow treating sets of port bits as a group leaving other bits unchanged."}),"\n",(0,i.jsx)(t.li,{children:"Up to 53 GPIOs, depending on configuration"}),"\n",(0,i.jsx)(t.li,{children:"Programmable control for GPIO interrupts"}),"\n"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Interrupt generation masking"}),"\n",(0,i.jsx)(t.li,{children:"Edge-triggered on rising, falling, or both"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"functional-description",children:"Functional description"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(1653).Z+"",title:"Figure 1 GPIO block diagram",width:"1248",height:"529"})}),"\n",(0,i.jsx)(t.p,{children:"The below Figure shows the operation sequences available for the GPIO.\nThe pad alternate function is using the pad alternate function select register.\nRefer to \u2018Alternate Function Controller (AFC)\u2019 for more details about each register.\nThe pad control supports pull-down, pull-up, input buffer, and summit trigger input buffer.\nRefer to \u2018Pad Controller (PADCON)\u2019 for more details about each register."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(95010).Z+"",title:"Figure 2 GPIO flow chart",width:"667",height:"732"})}),"\n",(0,i.jsx)(t.h3,{id:"masked-access",children:"Masked access"}),"\n",(0,i.jsx)(t.p,{children:"The masked access feature permits individual bits or multiple bits to be read from or written to in a single transfer. This avoids software-based read-modify-write operations that are not thread safe. With the masked access operations, the 16-bit I/O is divided into two halves, lower byte and upper byte. The bit mask address spaces are defined as two arrays each containing 256 words."}),"\n",(0,i.jsx)(t.p,{children:"For example, to set bits[1:0] to 1 and clear bits[7:6] in a single operation, users can carry out the write to the lower byte mask access address space. The required bit mask is 0xC3, and users can write the operation as MASKLOWBYTE[0xC3] = 0x03."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(78899).Z+"",title:"Figure 3 mask lowbyte access",width:"719",height:"422"})}),"\n",(0,i.jsx)(t.p,{children:"To update some of the bits in the upper eight bits of the GPIO port, users can use the MASKHIGHBYTE array as Figure below."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(53374).Z+"",title:"Figure 4 mask highbyte access",width:"686",height:"459"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"peripheral_examples",children:"Peripheral_Examples"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/Product/iMCU/W7500/Peripherals-internal/blink-led",children:"GPIO Blink LED"})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1653:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/gpio_block_diagram-efbadb28c2d73740475879b91427225f.jpg"},95010:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/gpio_flow_chart2-887a1e099df914512c4c32f3d2a3333d.jpg"},53374:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/mask_highbyte_access-73b33a6333fafd1e14f7d487ac6203a1.jpg"},78899:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/mask_lowbyte_access-6abd045c2ed188f1bcf5b96e079ae71e.jpg"},11151:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>a});var i=r(67294);const n={},s=i.createContext(n);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);