"use strict";(self.webpackChunkwiznet_document=self.webpackChunkwiznet_document||[]).push([[607],{88109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=n(85893),i=n(11151);const s={id:"overview",title:"Overview",date:new Date("2021-07-16T00:00:00.000Z")},o=void 0,a={id:"Product/iEthernet/W3150/overview",title:"Overview",description:"Please note that this product was discontinued.",source:"@site/docs/Product/iEthernet/W3150/Overview.md",sourceDirName:"Product/iEthernet/W3150",slug:"/Product/iEthernet/W3150/overview",permalink:"/Product/iEthernet/W3150/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iEthernet/W3150/Overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview",date:"2021-07-16T00:00:00.000Z"},sidebar:"docs",previous:{title:"W3150A+",permalink:"/Product/iEthernet/W3150/"},next:{title:"Documents",permalink:"/Product/iEthernet/W3150/document"}},c={},d=[{value:"Features",id:"features",level:2}];function l(e){const t={admonition:"admonition",h2:"h2",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsx)(t.p,{children:"Please note that this product was discontinued.\nWe do not recommend using it in new design."})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(95454).Z+"",width:"316",height:"279"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Hardwired Dual TCP/IP Stack Controller"})}),"\n",(0,r.jsx)(t.p,{children:"The W3150A+ chip is a Hardwired TCP/IP embedded Ethernet controller that enables easier Internet connection for embedded systems."}),"\n",(0,r.jsx)(t.p,{children:"W3150A+ suits users in need of stable Internet connectivity best, using a single chip to implement TCP/IP Stack & 10/100 Ethernet MAC . Hardwired TCP/IP stack supports TCP, UDP, IPv4, ICMP, ARP, IGMP, and PPPoE, \u2026, which has been proven through various applications over many years. W3150A+ uses a 16Kbytes internal buffer as its data communication memory."}),"\n",(0,r.jsx)(t.p,{children:"By using W3150A+, users can implement the Ethernet application they need by using a simple socket program instead of handling a complex Ethernet Controller."}),"\n",(0,r.jsx)(t.p,{children:"It is possible to use 4 independent hardware sockets simultaneously. BUS & SPI (Serial Peripheral Interface) is provided for easy integration with the external MCU."}),"\n",(0,r.jsx)(t.p,{children:"As it doesn\u2019t have the PHY, users can interface any external PHY such as switching PHY according to their requirement."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(39068).Z+"",width:"300",height:"428"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Hardwired TCP/IP protocols : TCP, UDP, ICMP, IPv4, ARP, IGMP, PPPoE"}),"\n",(0,r.jsx)(t.li,{children:"Un-attackable hardware network engine for preventing network attacks such as flooding, spoofing, injection"}),"\n",(0,r.jsx)(t.li,{children:"Host Interface : Direct/Indirect BUS & Serial Peripheral Interface (SPI MODE 0,3)"}),"\n",(0,r.jsx)(t.li,{children:"4 Independent hardware socket"}),"\n",(0,r.jsx)(t.li,{children:"Internal 16Kbytes memory for TCP/IP packet processing"}),"\n",(0,r.jsx)(t.li,{children:"MII Interface for Ethernet PHY chip"}),"\n",(0,r.jsx)(t.li,{children:"3.3V Operation with 5V I/O signal tolerance"}),"\n",(0,r.jsx)(t.li,{children:"64LQFP lead-free package (10x10mm)"}),"\n"]}),"\n",(0,r.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},39068:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/3150A-Block-3aec9f90851be11de0a32e90bb5118ac.jpg"},95454:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo_w3150A-1-6fe517419b6352008cbee87e57a30a83.jpg"},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var r=n(67294);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);