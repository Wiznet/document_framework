"use strict";(self.webpackChunkwiznet_document=self.webpackChunkwiznet_document||[]).push([[67604],{29256:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Product/iMCU/w7500x_Common_resource/Peripherals-internal/blink-led","title":"GPIO Blink LED example","description":"(C) COPYRIGHT 2015 WIZnet","source":"@site/docs/Product/iMCU/w7500x_Common_resource/Peripherals-internal/blink-led.md","sourceDirName":"Product/iMCU/w7500x_Common_resource/Peripherals-internal","slug":"/Product/iMCU/w7500x_Common_resource/Peripherals-internal/blink-led","permalink":"/Product/iMCU/w7500x_Common_resource/Peripherals-internal/blink-led","draft":false,"unlisted":false,"editUrl":"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iMCU/w7500x_Common_resource/Peripherals-internal/blink-led.md","tags":[],"version":"current","frontMatter":{"id":"blink-led","title":"GPIO Blink LED example","date":"2020-06-10T00:00:00.000Z"}}');var t=i(74848),s=i(28453);const l={id:"blink-led",title:"GPIO Blink LED example",date:new Date("2020-06-10T00:00:00.000Z")},o=void 0,d={},c=[{value:"Example Description",id:"example-description",level:3},{value:"Directory contents",id:"directory-contents",level:3},{value:"Hardware and Software environment",id:"hardware-and-software-environment",level:3},{value:"How to use it ?",id:"how-to-use-it-",level:3}];function a(e){const n={a:"a",h3:"h3",hr:"hr",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"(C) COPYRIGHT 2015 WIZnet"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"file    : GPIO/Blink_LED/readme.md"}),"\n",(0,t.jsx)(n.li,{children:"author  : IOP Team"}),"\n",(0,t.jsx)(n.li,{children:"version : V1.0.0"}),"\n",(0,t.jsx)(n.li,{children:"date    : 1-May-2015"}),"\n",(0,t.jsx)(n.li,{children:"brief   : Description of the GPIO Blink_LED example."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\nWITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\nTIME. AS A RESULT, WIZNET SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT\nOR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT\nOF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION\nCONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-description",children:"Example Description"}),"\n",(0,t.jsx)(n.p,{children:"GPIO ports are connected on APB2 bus, using UB_MASKED and LB_MASKED registers\n2 cycles are required to set a pin and another cycle to reset it. So GPIO pins\ncan toggle at AHB clock divided by 4."}),"\n",(0,t.jsx)(n.p,{children:"This example describes how to use UB_MASKED and LB_MASKED\n(Port Bit GPIO_SetBits/GPIO_ResetBits Register)"}),"\n",(0,t.jsx)(n.p,{children:"PC_05, PC_08, PC_09(configured in output pushpull mode) toggles in a forever\nloop:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set Pin_5 and Pin_8 and Pin_9 by setting corresponding bits\nin GPIO_SetBits register."}),"\n",(0,t.jsx)(n.li,{children:"Reset Pin_5 and Pin_8 and Pin_9 by setting corresponding bits\nin GPIO_ResetBits register."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"directory-contents",children:"Directory contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GPIO/LED_Blink/main.c                                 (Main program)"}),"\n",(0,t.jsx)(n.li,{children:"GPIO/LED_Blink/MDK/W7500x_GPIO_Blink_LED.uvproj       (Project file)"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"hardware-and-software-environment",children:"Hardware and Software environment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This example has been tested with WIZnet WIZwiki W7500 platform."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To select the WIZnet WIZwiki platform used to run the example."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"WIZwiki W7500 Set-up"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use LED(R) connected to PC_08 pin"}),"\n",(0,t.jsx)(n.li,{children:"Use LED(G) connected to PC_09 pin"}),"\n",(0,t.jsx)(n.li,{children:"Use LED(B) connected to PC_05 pin"}),"\n",(0,t.jsx)(n.li,{children:"In order to use the LED to be changed from PAD_AF0 to PAD_AF1."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"how-to-use-it-",children:"How to use it ?"}),"\n",(0,t.jsx)(n.p,{children:"In order to make the program work, you must do the following :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open your preferred toolchain."}),"\n",(0,t.jsx)(n.li,{children:"Rebuild all files and load your image into target memory."}),"\n",(0,t.jsx)(n.li,{children:"Run the example."}),"\n",(0,t.jsx)(n.li,{children:"WIZwiki W7500 where the Flash memory density ranges 128Kbytes."}),"\n",(0,t.jsxs)(n.li,{children:["If you have any questions, please use the forum site.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['"',(0,t.jsx)(n.a,{href:"https://maker.wiznet.io/forum/",children:"https://maker.wiznet.io/forum/"}),'"']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\xa9 COPYRIGHT 2015 WIZnet Co.,Ltd."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(96540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);