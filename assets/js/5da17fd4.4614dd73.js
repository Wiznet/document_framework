"use strict";(self.webpackChunkwiznet_document=self.webpackChunkwiznet_document||[]).push([[61153],{14568:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Product/S2E-Module/WIZ550SR/overview-EN","title":"Product Overview [EN]","description":"Overview","source":"@site/docs/Product/S2E-Module/WIZ550SR/Overview-EN.md","sourceDirName":"Product/S2E-Module/WIZ550SR","slug":"/Product/S2E-Module/WIZ550SR/overview-EN","permalink":"/Product/S2E-Module/WIZ550SR/overview-EN","draft":false,"unlisted":false,"editUrl":"https://github.com/Wiznet/document_framework/tree/master/docs/Product/S2E-Module/WIZ550SR/Overview-EN.md","tags":[],"version":"current","frontMatter":{"id":"overview-EN","title":"Product Overview [EN]","date":"2020-04-16T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"WIZ550SR","permalink":"/Product/S2E-Module/WIZ550SR/"},"next":{"title":"Product Overview [KO]","permalink":"/Product/S2E-Module/WIZ550SR/overview-KO"}}');var r=t(74848),s=t(28453);const l={id:"overview-EN",title:"Product Overview [EN]",date:new Date("2020-04-16T00:00:00.000Z")},o=void 0,d={},c=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2}];function a(e){const n={h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"WIZ550SR Overview",src:t(23029).A+"",width:"763",height:"181"})}),"\n",(0,r.jsx)(n.p,{children:"WIZ550SR is Serial to Ethernet module, It's mounted TCP/IP chip W5500 of\nWIZnet and Cortex-M3-based STM32F103RCT6 of STmicro. WIZ550SR does not\ncontain RJ45 because very small size type. WIZ550SR provides the user\nInterface 2.00mm Pitch Pin header."}),"\n",(0,r.jsx)(n.p,{children:"WIZ550SR is the protocol converter that transmits the data sent by\nserial equipment as TCP/IP data type, and converts back the TCP/IP data\nreceived through the network into serial data to transmit back to a\nserial equipment. It complies with industrial temperature standard and\nsupports the serial interfaces of UART."}),"\n",(0,r.jsx)(n.p,{children:"WIZ550SR is is compatible with the Configuration Tool of WIZ550S2E and\nWIZ550WEB, and will use the same AT Command."}),"\n",(0,r.jsx)(n.p,{children:"However, Configuration Tool must use the latest version."}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Very small size Serial to Ethernet Module. 22mm x 24mm x 13mm."}),"\n",(0,r.jsxs)(n.li,{children:["WIZnet, TCP/IP Chip ",(0,r.jsx)(n.strong,{children:"W5500"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"STmicro, Cortex-M3 based STM32F103RCT6."}),"\n",(0,r.jsx)(n.li,{children:"Not include a transformer and RJ45."}),"\n",(0,r.jsx)(n.li,{children:"2.00mm Pitch Pin Header Type, 1x11."}),"\n",(0,r.jsxs)(n.li,{children:["Support the ",(0,r.jsx)(n.strong,{children:"MDI"}),"(Medium Dependent Interface).","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TXN, TXP, RXN, RXP"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the ",(0,r.jsx)(n.strong,{children:"UART"})," Interface.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RXD, TXD, RTS, CTS, DSR(Option), DTR(Option)"}),"\n",(0,r.jsx)(n.li,{children:"Buad Rate : 600bps to 230.4kbps"}),"\n",(0,r.jsx)(n.li,{children:"Length : 8bit"}),"\n",(0,r.jsx)(n.li,{children:"Parity bit : None, Odd, Even"}),"\n",(0,r.jsx)(n.li,{children:"Stop bit : 1bit, 2bit"}),"\n",(0,r.jsx)(n.li,{children:"Support the RS-232C Interface."}),"\n",(0,r.jsx)(n.li,{children:"Will be supported the RS-422/485 Interface."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Default : 115200, 8, n, 1"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the Debug UART.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"DEBUG RXD, DEBUG TXD"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Default : 115200, 8, n, 1"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the PHY Status Output.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Active LED, Link LED"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the STATUS Output.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"LOW : TCP Connect."}),"\n",(0,r.jsx)(n.li,{children:"HIGH : TCP Diconnect."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["System Pin.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RESET : System Reset, Active Low."}),"\n",(0,r.jsx)(n.li,{children:"BOOT0 : MCU BOOT mode operation, Active High."}),"\n",(0,r.jsx)(n.li,{children:"H/W TRIG : App BOOT mode operation, Active Low."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the Indicator LED.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Power LED(LD3)."}),"\n",(0,r.jsx)(n.li,{children:"LED 0(LD1) :"}),"\n",(0,r.jsx)(n.li,{children:"LED 1(LD2) :"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the Pin Header Hole for firmware upload.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2.54mm Pitch, Not Mount."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Support the Pin Header Hole for SWD.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1.27mm Pitch, Not Mount."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Include eeprom for data storage."}),"\n",(0,r.jsx)(n.li,{children:"Support the AT Command for the set of WIZ550SR."}),"\n",(0,r.jsx)(n.li,{children:"Support the WIZ VSP (Virtual Serial Port)."}),"\n",(0,r.jsx)(n.li,{children:"Operation Temperature : -40\u2103 ~ 85\u2103"}),"\n",(0,r.jsx)(n.li,{children:"Size : 22mm x 24mm x 13mm"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},23029:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/wiz550sr_overview-3c126ce48216df84f1a4199900d12b29.png"},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);